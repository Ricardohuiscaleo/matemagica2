// ‚úÖ SISTEMA DE GESTI√ìN DE ESTUDIANTES MODULAR - VERSI√ìN CORREGIDA
// Este m√≥dulo maneja completamente la gesti√≥n de estudiantes de forma independiente

console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Inicializando Sistema de Gesti√≥n de Estudiantes v2.0...');

// ‚úÖ CLASE PRINCIPAL CORREGIDA
class StudentManagementSystem {
    constructor() {
        this.students = [];
        this.currentStudent = null;
        this.isInitialized = false;
        this.supabaseClient = null;
        
        // ‚úÖ NUEVO: Referencia al m√≥dulo UX/UI del modal
        this.selectionModal = null;
        
        // Auto-inicializar cuando el DOM est√© listo
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.init());
        } else {
            this.init();
        }
    }
    
    // ‚úÖ INICIALIZACI√ìN CORREGIDA DEL SISTEMA
    async init() {
        console.log('üöÄ Inicializando Sistema de Gesti√≥n de Estudiantes...');
        
        try {
            // 1. Inicializar conexi√≥n con Supabase
            await this.initializeSupabase();
            
            // 2. Cargar datos existentes
            await this.loadStudentsData();
            
            // 3. ‚úÖ NUEVO: Inicializar m√≥dulo UX/UI del modal
            this.initializeSelectionModal();
            
            // 4. Configurar event listeners del dashboard
            this.setupDashboardEventListeners();
            
            // 5. Actualizar interfaz inicial
            this.updateDashboardDisplay();
            
            this.isInitialized = true;
            console.log('‚úÖ Sistema de Gesti√≥n de Estudiantes inicializado completamente');
            
        } catch (error) {
            console.error('‚ùå Error inicializando sistema de estudiantes:', error);
            this.handleInitializationError(error);
        }
    }

    // ‚úÖ CORREGIDO: M√©todo mejorado initializeSupabase
    async initializeSupabase() {
        try {
            console.log('üîå Inicializando conexi√≥n Supabase...');
            
            // ‚úÖ ORDEN DE PRIORIDAD CORREGIDO para obtener cliente Supabase
            let supabaseFound = false;
            
            // 1. Desde window.supabaseClient (DONDE AUTH.JS LO EXPONE)
            if (window.supabaseClient && typeof window.supabaseClient.from === 'function') {
                this.supabaseClient = window.supabaseClient;
                supabaseFound = true;
                console.log('‚úÖ Cliente Supabase conectado desde window.supabaseClient (auth.js)');
            }
            // 2. Desde loginSystem.supabase
            else if (window.loginSystem && window.loginSystem.supabase && typeof window.loginSystem.supabase.from === 'function') {
                this.supabaseClient = window.loginSystem.supabase;
                supabaseFound = true;
                console.log('‚úÖ Cliente Supabase conectado desde loginSystem');
            }
            // 3. Desde window.supabase (fallback)
            else if (window.supabase && typeof window.supabase.from === 'function') {
                this.supabaseClient = window.supabase;
                supabaseFound = true;
                console.log('‚úÖ Cliente Supabase conectado desde window.supabase');
            }
            
            if (supabaseFound) {
                // ‚úÖ VERIFICAR que el cliente realmente funciona
                try {
                    console.log('üß™ Probando conexi√≥n con Supabase...');
                    
                    // Test simple de conexi√≥n
                    const { data, error } = await this.supabaseClient
                        .from('math_profiles')
                        .select('count', { count: 'exact', head: true });
                    
                    if (error) {
                        console.error('‚ùå Error en test de conexi√≥n Supabase:', error);
                        this.supabaseClient = null;
                    } else {
                        console.log('‚úÖ Conexi√≥n Supabase verificada exitosamente');
                        
                        // ‚úÖ VERIFICAR perfil de usuario
                        const userProfile = JSON.parse(localStorage.getItem('matemagica-user-profile') || '{}');
                        if (userProfile.user_id) {
                            console.log(`üë§ Usuario verificado: ${userProfile.email} (ID: ${userProfile.user_id})`);
                        } else {
                            console.warn('‚ö†Ô∏è No se encontr√≥ perfil de usuario en localStorage');
                        }
                    }
                } catch (testError) {
                    console.error('‚ùå Error probando conexi√≥n Supabase:', testError);
                    this.supabaseClient = null;
                }
            } else {
                console.log('‚ö†Ô∏è Cliente Supabase no disponible, usando solo localStorage');
                
                // ‚úÖ INTENTAR esperar por auth.js si a√∫n no est√° listo
                await this.waitForAuthSystem();
            }
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Error inicializando Supabase:', error);
            this.supabaseClient = null;
        }
    }

    // ‚úÖ NUEVO: Esperar por el sistema de auth si a√∫n no est√° listo
    async waitForAuthSystem() {
        try {
            console.log('üîÑ Esperando por sistema de autenticaci√≥n...');
            
            // Esperar hasta 10 segundos por auth.js
            for (let i = 0; i < 20; i++) {
                await new Promise(resolve => setTimeout(resolve, 500));
                
                // Verificar si loginSystem ya expuso el cliente
                if (window.supabaseClient && typeof window.supabaseClient.from === 'function') {
                    this.supabaseClient = window.supabaseClient;
                    console.log('‚úÖ Cliente Supabase encontrado despu√©s de esperar');
                    
                    // Verificar conexi√≥n
                    try {
                        const { data, error } = await this.supabaseClient
                            .from('math_profiles')
                            .select('count', { count: 'exact', head: true });
                        
                        if (!error) {
                            console.log('‚úÖ Conexi√≥n Supabase verificada (post-espera)');
                            return;
                        }
                    } catch (testError) {
                        console.warn('‚ö†Ô∏è Error verificando conexi√≥n post-espera:', testError);
                    }
                }
                
                console.log(`üîç Esperando auth system... ${i + 1}/20`);
            }
            
            console.log('‚ö†Ô∏è Sistema de auth no se inicializ√≥ en tiempo esperado');
        } catch (error) {
            console.error('‚ùå Error esperando por auth system:', error);
        }
    }
    
    // ‚úÖ CORREGIDO: M√©todo faltante handleInitializationError
    handleInitializationError(error) {
        console.error('‚ùå Error en inicializaci√≥n del sistema de estudiantes:', error);
        
        // Intentar modo fallback con solo localStorage
        try {
            this.loadStudentsFromLocalStorage();
            this.setupBasicEventListeners();
            this.isInitialized = true;
            console.log('‚ö†Ô∏è Sistema inicializado en modo fallback (solo localStorage)');
        } catch (fallbackError) {
            console.error('‚ùå Error incluso en modo fallback:', fallbackError);
            this.isInitialized = false;
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante loadStudentsData
    async loadStudentsData() {
        try {
            console.log('üìö Cargando estudiantes...');
            
            // Intentar cargar desde Supabase primero
            if (this.supabaseClient) {
                const supabaseStudents = await this.loadFromSupabase();
                if (supabaseStudents && supabaseStudents.length > 0) {
                    this.students = supabaseStudents;
                    await this.saveToLocal();
                    console.log(`‚úÖ ${this.students.length} estudiantes cargados desde Supabase`);
                    this.loadCurrentStudent();
                    return;
                }
            }
            
            // Fallback: cargar desde localStorage
            this.loadStudentsFromLocalStorage();
            this.loadCurrentStudent();
            
        } catch (error) {
            console.error('‚ùå Error cargando estudiantes:', error);
            this.students = [];
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante loadStudentsFromLocalStorage
    loadStudentsFromLocalStorage() {
        try {
            const localStudents = localStorage.getItem('matemagica_student_profiles');
            if (localStudents) {
                this.students = JSON.parse(localStudents);
                console.log(`‚úÖ ${this.students.length} estudiantes cargados desde localStorage`);
            } else {
                this.students = [];
                console.log('üìö No hay estudiantes guardados');
            }
        } catch (error) {
            console.error('‚ùå Error cargando desde localStorage:', error);
            this.students = [];
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante setupDashboardEventListeners
    setupDashboardEventListeners() {
        try {
            // Bot√≥n de cambiar estudiante (card clickeable)
            const studentCardButton = document.getElementById('student-card-button');
            if (studentCardButton) {
                studentCardButton.addEventListener('click', () => this.openStudentModal());
            }
            
            // Cerrar modales
            const closeButtons = [
                'close-student-modal',
                'close-new-student-modal', 
                'close-edit-student-modal'
            ];
            
            closeButtons.forEach(id => {
                const btn = document.getElementById(id);
                if (btn) btn.addEventListener('click', () => this.closeModals());
            });
            
            // Bot√≥n nuevo estudiante
            const newStudentBtn = document.getElementById('new-student-btn');
            if (newStudentBtn) {
                newStudentBtn.addEventListener('click', () => this.openNewStudentModal());
            }
            
            console.log('‚úÖ Event listeners del dashboard configurados');
        } catch (error) {
            console.error('‚ùå Error configurando event listeners:', error);
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante setupBasicEventListeners
    setupBasicEventListeners() {
        try {
            // Configurar solo los event listeners esenciales
            const studentCardButton = document.getElementById('student-card-button');
            if (studentCardButton) {
                studentCardButton.addEventListener('click', () => this.openStudentModal());
            }
            console.log('‚úÖ Event listeners b√°sicos configurados');
        } catch (error) {
            console.error('‚ùå Error en event listeners b√°sicos:', error);
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante updateDashboardDisplay
    updateDashboardDisplay() {
        try {
            this.updateCurrentStudentDisplay();
            if (this.selectionModal && this.selectionModal.estaAbierto && this.selectionModal.estaAbierto()) {
                this.refreshModalContent();
            }
        } catch (error) {
            console.error('‚ùå Error actualizando dashboard:', error);
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante openNewStudentModal
    openNewStudentModal() {
        try {
            if (this.selectionModal && this.selectionModal.abrirModalNuevoEstudiante) {
                this.selectionModal.abrirModalNuevoEstudiante();
            } else {
                console.warn('‚ö†Ô∏è M√≥dulo UX/UI no disponible, usando fallback');
                this.openNewStudentModalFallback();
            }
        } catch (error) {
            console.error('‚ùå Error abriendo modal nuevo estudiante:', error);
            this.openNewStudentModalFallback();
        }
    }

    // ‚úÖ NUEVO: Fallback para modal de nuevo estudiante
    openNewStudentModalFallback() {
        const modal = document.getElementById('new-student-modal');
        if (modal) {
            modal.classList.remove('hidden');
            modal.style.display = 'flex';
            
            // Limpiar formulario
            const form = document.getElementById('new-student-form');
            if (form) {
                form.reset();
                this.resetFormStyles();
            }
        }
    }

    // ‚úÖ CORREGIDO: M√©todo faltante closeModals
    closeModals() {
        try {
            // Cerrar modal de selecci√≥n
            if (this.selectionModal && this.selectionModal.cerrar) {
                this.selectionModal.cerrar();
            }
            
            // Cerrar modales b√°sicos
            const modals = [
                'student-modal',
                'new-student-modal',
                'edit-student-modal',
                'fallback-student-modal'
            ];
            
            modals.forEach(modalId => {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.add('hidden');
                    modal.style.display = 'none';
                }
            });
            
        } catch (error) {
            console.error('‚ùå Error cerrando modales:', error);
        }
    }

    // ‚úÖ NUEVO: Inicializar m√≥dulo UX/UI del modal
    initializeSelectionModal() {
        try {
            // Verificar si la clase StudentSelectionModal est√° disponible
            if (typeof StudentSelectionModal !== 'undefined') {
                this.selectionModal = new StudentSelectionModal(this);
                console.log('‚úÖ M√≥dulo UX/UI del modal inicializado');
            } else {
                console.warn('‚ö†Ô∏è M√≥dulo StudentSelectionModal no encontrado, usando fallback');
                // Cargar el m√≥dulo din√°micamente si no est√° disponible
                this.loadSelectionModalModule();
            }
            
            // ‚úÖ NUEVO: Tambi√©n intentar inicializar el modal global
            if (window.initializeStudentSelectionModal) {
                window.initializeStudentSelectionModal();
            }
        } catch (error) {
            console.error('‚ùå Error inicializando m√≥dulo UX/UI:', error);
        }
    }

    // ‚úÖ NUEVO: Cargar m√≥dulo UX/UI din√°micamente
    async loadSelectionModalModule() {
        try {
            const script = document.createElement('script');
            script.src = 'js/student-selection-modal.js';
            script.onload = () => {
                if (typeof StudentSelectionModal !== 'undefined') {
                    this.selectionModal = new StudentSelectionModal(this);
                    console.log('‚úÖ M√≥dulo UX/UI cargado din√°micamente');
                }
            };
            document.head.appendChild(script);
        } catch (error) {
            console.error('‚ùå Error cargando m√≥dulo UX/UI din√°micamente:', error);
        }
    }
    
    // ‚úÖ CARGAR DESDE SUPABASE
    async loadFromSupabase() {
        try {
            const userProfile = JSON.parse(localStorage.getItem('matemagica-user-profile') || '{}');
            const parentId = userProfile.user_id;
            
            if (!parentId) return null;
            
            const { data, error } = await this.supabaseClient
                .from('math_profiles')
                .select('*')
                .eq('parent_id', parentId)
                .eq('user_role', 'student')
                .not('user_id', 'is', null)
                .order('created_at', { ascending: true });
            
            if (error) {
                console.error('‚ùå Error consultando Supabase:', error);
                return null;
            }
            
            // Convertir formato
            return data.map(student => ({
                id: student.user_id,
                name: student.full_name,
                age: student.age || 8,
                gender: student.gender || 'ni√±o',
                course: student.course || '',
                interests: student.interests || [],
                mathLevel: student.current_level || 1,
                avatar: student.avatar || (student.gender === 'ni√±a' ? 'üëß' : 'üë¶'),
                parentId: student.parent_id,
                createdAt: student.created_at,
                lastActivity: student.updated_at || student.created_at,
                stats: {
                    totalExercises: student.total_exercises || 0,
                    correctAnswers: student.correct_exercises || 0,
                    totalPoints: student.total_points || 0,
                    streakDays: student.streak_days || 0,
                    averageAccuracy: student.average_accuracy || 0
                }
            }));
            
        } catch (error) {
            console.error('‚ùå Error en loadFromSupabase:', error);
            return null;
        }
    }
    
    // ‚úÖ GUARDAR EN LOCALSTORAGE
    async saveToLocal() {
        try {
            localStorage.setItem('matemagica_student_profiles', JSON.stringify(this.students));
            return true;
        } catch (error) {
            console.error('‚ùå Error guardando en localStorage:', error);
            return false;
        }
    }
    
    // ‚úÖ CREAR NUEVO ESTUDIANTE
    async createStudent(studentData) {
        try {
            const studentId = `student_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
            const parentProfile = JSON.parse(localStorage.getItem('matemagica-user-profile') || '{}');
            
            const newStudent = {
                id: studentId,
                name: studentData.name.trim(),
                age: parseInt(studentData.age),
                gender: studentData.gender,
                course: studentData.course?.trim() || '',
                interests: studentData.interests || [],
                mathLevel: parseInt(studentData.mathLevel) || 1,
                avatar: studentData.avatar || (studentData.gender === 'ni√±a' ? 'üëß' : 'üë¶'),
                parentId: parentProfile.user_id || 'unknown',
                createdAt: new Date().toISOString(),
                lastActivity: new Date().toISOString(),
                stats: {
                    totalExercises: 0,
                    correctAnswers: 0,
                    totalPoints: 0,
                    streakDays: 0,
                    averageAccuracy: 0
                }
            };
            
            this.students.push(newStudent);
            await this.saveToLocal();
            
            // Guardar en Supabase si est√° disponible
            if (this.supabaseClient) {
                await this.saveToSupabase(newStudent);
            }
            
            // Si es el primer estudiante, seleccionarlo
            if (this.students.length === 1) {
                await this.selectStudent(newStudent.id);
            }
            
            console.log('‚úÖ Estudiante creado:', newStudent.name);
            return newStudent;
            
        } catch (error) {
            console.error('‚ùå Error creando estudiante:', error);
            throw error;
        }
    }
    
    // ‚úÖ GUARDAR EN SUPABASE
    async saveToSupabase(student) {
        try {
            if (!this.supabaseClient) return false;
            
            const supabaseRecord = {
                user_id: student.id,
                full_name: student.name,
                age: student.age,
                gender: student.gender,
                course: student.course,
                interests: student.interests,
                current_level: student.mathLevel,
                parent_id: student.parentId,
                user_role: 'student',
                avatar: student.avatar,
                total_exercises: student.stats.totalExercises,
                correct_exercises: student.stats.correctAnswers,
                total_points: student.stats.totalPoints,
                streak_days: student.stats.streakDays,
                average_accuracy: student.stats.averageAccuracy,
                created_at: student.createdAt,
                updated_at: student.lastActivity
            };
            
            const { error } = await this.supabaseClient
                .from('math_profiles')
                .upsert(supabaseRecord, { onConflict: 'user_id' });
            
            if (error) {
                console.error('‚ùå Error guardando en Supabase:', error);
                return false;
            }
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error en saveToSupabase:', error);
            return false;
        }
    }
    
    // ‚úÖ SELECCIONAR ESTUDIANTE
    async selectStudent(studentId) {
        try {
            const student = this.students.find(s => s.id === studentId);
            if (!student) {
                throw new Error('Estudiante no encontrado');
            }
            
            // Actualizar estudiante actual
            this.currentStudent = student;
            
            // Guardar en localStorage
            localStorage.setItem('matemagica_current_student_id', studentId);
            
            // Actualizar dashboard
            this.updateDashboardDisplay();
            
            // ‚úÖ NUEVO: Actualizar contenido del modal si est√° abierto
            this.refreshModalContent();
            
            console.log(`‚úÖ Estudiante seleccionado: ${student.name}`);
            return student;
            
        } catch (error) {
            console.error('‚ùå Error seleccionando estudiante:', error);
            throw error;
        }
    }
    
    // ‚úÖ CARGAR ESTUDIANTE ACTUAL
    loadCurrentStudent() {
        try {
            const currentStudentId = localStorage.getItem('matemagica_current_student_id');
            if (currentStudentId && this.students.length > 0) {
                const student = this.students.find(s => s.id === currentStudentId);
                if (student) {
                    this.currentStudent = student;
                    console.log('‚úÖ Estudiante actual cargado:', student.name);
                } else if (this.students.length > 0) {
                    this.selectStudent(this.students[0].id);
                }
            } else if (this.students.length > 0) {
                this.selectStudent(this.students[0].id);
            }
        } catch (error) {
            console.error('‚ùå Error cargando estudiante actual:', error);
        }
    }
    
    // ‚úÖ ACTUALIZAR DISPLAY DEL ESTUDIANTE ACTUAL
    updateCurrentStudentDisplay() {
        const nameElement = document.getElementById('current-student-name');
        const avatarElement = document.querySelector('.student-avatar, .w-8.h-8.bg-blue-500.rounded-full, .w-8.h-8.bg-pink-500.rounded-full');
        
        if (this.currentStudent) {
            if (nameElement) {
                nameElement.textContent = this.currentStudent.name;
            }
            
            if (avatarElement) {
                const avatar = this.currentStudent.avatar || (this.currentStudent.gender === 'ni√±a' ? 'üëß' : 'üë¶');
                avatarElement.textContent = avatar;
                
                // Actualizar colores seg√∫n g√©nero
                if (this.currentStudent.gender === 'ni√±a') {
                    avatarElement.className = avatarElement.className.replace(/bg-blue-\d+/, 'bg-pink-500');
                } else {
                    avatarElement.className = avatarElement.className.replace(/bg-pink-\d+/, 'bg-blue-500');
                }
            }
        } else {
            if (nameElement) nameElement.textContent = 'Sin estudiante';
            if (avatarElement) avatarElement.textContent = '?';
        }
    }

    // ‚úÖ M√âTODOS DE MODALES
    openStudentModal() {
        if (this.selectionModal) {
            // Usar el m√≥dulo UX/UI dedicado
            this.selectionModal.open();
        } else {
            // Fallback al m√©todo anterior si el m√≥dulo no est√° disponible
            console.warn('‚ö†Ô∏è M√≥dulo UX/UI no disponible, usando fallback');
            this.openStudentModalFallback();
        }
    }

    // ‚úÖ NUEVO: M√©todo para abrir modal de edici√≥n
    openEditModal(studentId) {
        try {
            const student = this.getStudentById(studentId);
            if (!student) {
                console.error('‚ùå Estudiante no encontrado para editar');
                return;
            }
            
            console.log(`‚úèÔ∏è Abriendo modal de edici√≥n para: ${student.name}`);
            
            // Abrir el modal
            const modal = document.getElementById('edit-student-modal');
            if (modal) {
                modal.classList.remove('hidden');
                modal.style.display = 'flex';
                
                // Llenar el formulario con los datos del estudiante
                this.populateEditForm(student);
                
                // Configurar event listeners del formulario de edici√≥n
                this.setupEditFormListeners(student.id);
            } else {
                console.error('‚ùå Modal de edici√≥n no encontrado en DOM');
            }
        } catch (error) {
            console.error('‚ùå Error abriendo modal de edici√≥n:', error);
        }
    }

    // ‚úÖ NUEVO: Llenar formulario de edici√≥n con datos del estudiante
    populateEditForm(student) {
        try {
            // Llenar campos b√°sicos
            const nameInput = document.getElementById('edit-student-name');
            const ageSelect = document.getElementById('edit-student-age');
            const courseInput = document.getElementById('edit-student-course');
            const levelSelect = document.getElementById('edit-student-level');
            const avatarInput = document.getElementById('selected-avatar');
            
            if (nameInput) nameInput.value = student.name || '';
            if (ageSelect) ageSelect.value = student.age || 8;
            if (courseInput) courseInput.value = student.course || '';
            if (levelSelect) levelSelect.value = student.mathLevel || 1;
            if (avatarInput) avatarInput.value = student.avatar || 'üë¶';
            
            // Seleccionar g√©nero
            const genderRadios = document.querySelectorAll('input[name="edit-gender"]');
            genderRadios.forEach(radio => {
                radio.checked = radio.value === student.gender;
                if (radio.checked) {
                    // Actualizar visual de la tarjeta
                    const card = radio.closest('.gender-option').querySelector('.gender-card');
                    if (card) {
                        card.style.borderColor = '#3B82F6';
                        card.style.backgroundColor = '#EFF6FF';
                    }
                }
            });
            
            // Seleccionar intereses
            const interestCheckboxes = document.querySelectorAll('input[name="edit-interests"]');
            interestCheckboxes.forEach(checkbox => {
                const isSelected = student.interests && student.interests.includes(checkbox.value);
                checkbox.checked = isSelected;
                
                // Actualizar visual del pill
                const pill = checkbox.closest('.interest-tag').querySelector('.interest-pill');
                if (pill) {
                    if (isSelected) {
                        pill.style.background = '#DBEAFE';
                        pill.style.borderColor = '#3B82F6';
                        pill.style.color = '#1E40AF';
                    } else {
                        pill.style.background = '#F3F4F6';
                        pill.style.borderColor = 'transparent';
                        pill.style.color = '#374151';
                    }
                }
            });
            
            // Actualizar avatar seleccionado
            this.updateSelectedAvatar(student.avatar || 'üë¶');
            
            console.log('‚úÖ Formulario de edici√≥n llenado correctamente');
        } catch (error) {
            console.error('‚ùå Error llenando formulario de edici√≥n:', error);
        }
    }

    // ‚úÖ NUEVO: Configurar event listeners del formulario de edici√≥n
    setupEditFormListeners(studentId) {
        // Remover listeners anteriores para evitar duplicados
        this.removeEditFormListeners();
        
        // Guardar cambios
        const saveBtn = document.getElementById('save-edit-student');
        const cancelBtn = document.getElementById('cancel-edit-student');
        const closeBtn = document.getElementById('close-edit-student-modal');
        const form = document.getElementById('edit-student-form');
        
        // Funci√≥n para guardar cambios
        this.handleEditFormSubmit = async (e) => {
            e.preventDefault();
            await this.saveStudentChanges(studentId);
        };
        
        // Funci√≥n para cancelar
        this.handleEditFormCancel = () => {
            this.closeEditModal();
        };
        
        // Agregar listeners
        if (form) form.addEventListener('submit', this.handleEditFormSubmit);
        if (saveBtn) saveBtn.addEventListener('click', this.handleEditFormSubmit);
        if (cancelBtn) cancelBtn.addEventListener('click', this.handleEditFormCancel);
        if (closeBtn) closeBtn.addEventListener('click', this.handleEditFormCancel);
        
        // Listeners para g√©nero
        document.querySelectorAll('input[name="edit-gender"]').forEach(radio => {
            radio.addEventListener('change', () => {
                document.querySelectorAll('.gender-card').forEach(card => {
                    card.style.borderColor = '#D1D5DB';
                    card.style.backgroundColor = 'white';
                });
                
                const selectedCard = radio.closest('.gender-option').querySelector('.gender-card');
                if (selectedCard) {
                    selectedCard.style.borderColor = '#3B82F6';
                    selectedCard.style.backgroundColor = '#EFF6FF';
                }
            });
        });
        
        // Listeners para intereses
        document.querySelectorAll('input[name="edit-interests"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const pill = checkbox.closest('.interest-tag').querySelector('.interest-pill');
                if (pill) {
                    if (checkbox.checked) {
                        pill.style.background = '#DBEAFE';
                        pill.style.borderColor = '#3B82F6';
                        pill.style.color = '#1E40AF';
                    } else {
                        pill.style.background = '#F3F4F6';
                        pill.style.borderColor = 'transparent';
                        pill.style.color = '#374151';
                    }
                }
            });
        });
    }

    // ‚úÖ NUEVO: Remover listeners del formulario de edici√≥n
    removeEditFormListeners() {
        const form = document.getElementById('edit-student-form');
        const saveBtn = document.getElementById('save-edit-student');
        const cancelBtn = document.getElementById('cancel-edit-student');
        const closeBtn = document.getElementById('close-edit-student-modal');
        
        if (form && this.handleEditFormSubmit) {
            form.removeEventListener('submit', this.handleEditFormSubmit);
        }
        if (saveBtn && this.handleEditFormSubmit) {
            saveBtn.removeEventListener('click', this.handleEditFormSubmit);
        }
        if (cancelBtn && this.handleEditFormCancel) {
            cancelBtn.removeEventListener('click', this.handleEditFormCancel);
        }
        if (closeBtn && this.handleEditFormCancel) {
            closeBtn.removeEventListener('click', this.handleEditFormCancel);
        }
    }

    // ‚úÖ NUEVO: Guardar cambios del estudiante
    async saveStudentChanges(studentId) {
        try {
            // Obtener datos del formulario
            const formData = this.getEditFormData();
            
            // Validar datos
            if (!this.validateEditFormData(formData)) {
                return;
            }
            
            // Actualizar estudiante
            const updatedStudent = await this.updateStudent(studentId, formData);
            
            // Cerrar modal
            this.closeEditModal();
            
            // Mostrar √©xito
            if (typeof showSuccessToast === 'function') {
                showSuccessToast(`‚úÖ ${updatedStudent.name} actualizado correctamente`);
            }
            
            // Actualizar UI si el modal de selecci√≥n est√° abierto
            if (this.selectionModal && this.selectionModal.estaAbierto && this.selectionModal.estaAbierto()) {
                this.selectionModal.actualizarContenido();
            }
            
            console.log('‚úÖ Estudiante actualizado exitosamente');
            
        } catch (error) {
            console.error('‚ùå Error guardando cambios del estudiante:', error);
            if (typeof showErrorToast === 'function') {
                showErrorToast('Error al guardar los cambios');
            }
        }
    }

    // ‚úÖ NUEVO: Obtener datos del formulario de edici√≥n
    getEditFormData() {
        const nameInput = document.getElementById('edit-student-name');
        const ageSelect = document.getElementById('edit-student-age');
        const courseInput = document.getElementById('edit-student-course');
        const levelSelect = document.getElementById('edit-student-level');
        const avatarInput = document.getElementById('selected-avatar');
        
        // Obtener g√©nero seleccionado
        const genderRadio = document.querySelector('input[name="edit-gender"]:checked');
        
        // Obtener intereses seleccionados
        const interestCheckboxes = document.querySelectorAll('input[name="edit-interests"]:checked');
        const interests = Array.from(interestCheckboxes).map(cb => cb.value);
        
        return {
            name: nameInput?.value?.trim() || '',
            age: parseInt(ageSelect?.value) || 8,
            gender: genderRadio?.value || 'ni√±o',
            course: courseInput?.value?.trim() || '',
            mathLevel: parseInt(levelSelect?.value) || 1,
            avatar: avatarInput?.value || 'üë¶',
            interests: interests,
            lastActivity: new Date().toISOString()
        };
    }

    // ‚úÖ NUEVO: Validar datos del formulario de edici√≥n
    validateEditFormData(data) {
        if (!data.name || data.name.length < 2) {
            if (typeof showErrorToast === 'function') {
                showErrorToast('‚ùå El nombre debe tener al menos 2 caracteres');
            }
            return false;
        }
        
        if (data.age < 5 || data.age > 12) {
            if (typeof showErrorToast === 'function') {
                showErrorToast('‚ùå La edad debe estar entre 5 y 12 a√±os');
            }
            return false;
        }
        
        if (!['ni√±o', 'ni√±a'].includes(data.gender)) {
            if (typeof showErrorToast === 'function') {
                showErrorToast('‚ùå Debe seleccionar un g√©nero');
            }
            return false;
        }
        
        return true;
    }

    // ‚úÖ NUEVO: Cerrar modal de edici√≥n
    closeEditModal() {
        const modal = document.getElementById('edit-student-modal');
        if (modal) {
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }
        
        // Limpiar listeners
        this.removeEditFormListeners();
        
        console.log('‚úÖ Modal de edici√≥n cerrado');
    }

    // ‚úÖ NUEVO: Funci√≥n para seleccionar avatar
    selectAvatar(avatar) {
        try {
            // Actualizar valor oculto
            const avatarInput = document.getElementById('selected-avatar');
            if (avatarInput) {
                avatarInput.value = avatar;
            }
            
            // Actualizar visual
            this.updateSelectedAvatar(avatar);
            
            console.log(`‚úÖ Avatar seleccionado: ${avatar}`);
        } catch (error) {
            console.error('‚ùå Error seleccionando avatar:', error);
        }
    }

    // ‚úÖ NUEVO: Actualizar visual del avatar seleccionado
    updateSelectedAvatar(avatar) {
        try {
            // Remover selecci√≥n anterior
            document.querySelectorAll('.avatar-option').forEach(option => {
                option.style.borderColor = '#D1D5DB';
                option.style.backgroundColor = 'white';
            });
            
            // Marcar avatar seleccionado
            const selectedOption = document.querySelector(`[data-avatar="${avatar}"]`);
            if (selectedOption) {
                selectedOption.style.borderColor = '#3B82F6';
                selectedOption.style.backgroundColor = '#DBEAFE';
            }
        } catch (error) {
            console.error('‚ùå Error actualizando avatar seleccionado:', error);
        }
    }

    // ‚úÖ NUEVO: Funci√≥n de diagn√≥stico espec√≠fico
    async diagnoseSupabaseConnection() {
        console.log('üî¨ === DIAGN√ìSTICO DETALLADO DE SUPABASE ===');
        
        // 1. Verificar disponibilidad de clientes
        console.log('üîç Verificando disponibilidad de clientes Supabase:');
        console.log('  - window.supabase:', typeof window.supabase, window.supabase ? '‚úÖ' : '‚ùå');
        console.log('  - window.supabaseClient:', typeof window.supabaseClient, window.supabaseClient ? '‚úÖ' : '‚ùå');
        console.log('  - window.loginSystem:', typeof window.loginSystem, window.loginSystem ? '‚úÖ' : '‚ùå');
        console.log('  - window.loginSystem.supabase:', window.loginSystem?.supabase ? '‚úÖ' : '‚ùå');
        
        // 2. Probar each uno que est√© disponible
        const availableClients = [];
        
        if (window.supabaseClient && typeof window.supabaseClient.from === 'function') {
            availableClients.push({ name: 'window.supabaseClient', client: window.supabaseClient });
        }
        
        if (window.loginSystem?.supabase && typeof window.loginSystem.supabase.from === 'function') {
            availableClients.push({ name: 'window.loginSystem.supabase', client: window.loginSystem.supabase });
        }
        
        if (window.supabase && typeof window.supabase.createClient === 'function') {
            // No testear window.supabase directamente porque es la librer√≠a, no un cliente
            console.log('  - window.supabase es la librer√≠a, no un cliente inicializado');
        }
        
        console.log(`üîç Clientes disponibles: ${availableClients.length}`);
        
        // 3. Probar cada cliente disponible
        for (const { name, client } of availableClients) {
            try {
                console.log(`üß™ Probando ${name}...`);
                
                const { data, error } = await client
                    .from('math_profiles')
                    .select('count', { count: 'exact', head: true });
                
                if (error) {
                    console.error(`‚ùå ${name} - Error:`, error.message);
                } else {
                    console.log(`‚úÖ ${name} - Funciona correctamente`);
                    
                    // Verificar autenticaci√≥n
                    try {
                        const { data: { session } } = await client.auth.getSession();
                        if (session?.user) {
                            console.log(`üë§ ${name} - Usuario autenticado:`, session.user.email);
                        } else {
                            console.log(`üë§ ${name} - Sin sesi√≥n de usuario`);
                        }
                    } catch (authError) {
                        console.warn(`‚ö†Ô∏è ${name} - Error verificando auth:`, authError.message);
                    }
                }
            } catch (testError) {
                console.error(`‚ùå ${name} - Error en test:`, testError.message);
            }
        }
        
        // 4. Verificar datos locales
        console.log('üíæ Verificando datos locales:');
        const userProfile = localStorage.getItem('matemagica-user-profile');
        const isAuthenticated = localStorage.getItem('matemagica-authenticated');
        const students = localStorage.getItem('matemagica_student_profiles');
        
        console.log('  - matemagica-user-profile:', userProfile ? '‚úÖ Presente' : '‚ùå Ausente');
        console.log('  - matemagica-authenticated:', isAuthenticated ? '‚úÖ Presente' : '‚ùå Ausente');
        console.log('  - matemagica_student_profiles:', students ? '‚úÖ Presente' : '‚ùå Ausente');
        
        if (userProfile) {
            try {
                const profile = JSON.parse(userProfile);
                console.log('  - User ID:', profile.user_id || 'NO ENCONTRADO');
                console.log('  - Email:', profile.email || 'NO ENCONTRADO');
                console.log('  - Role:', profile.user_role || 'NO ENCONTRADO');
            } catch (parseError) {
                console.error('  - Error parseando perfil:', parseError.message);
            }
        }
        
        console.log('üî¨ === FIN DEL DIAGN√ìSTICO ===');
        
        return availableClients.length > 0 ? availableClients[0] : null;
    }
    
    // ‚úÖ NUEVO: Actualizar estudiante existente
    async updateStudent(studentId, newData) {
        try {
            const studentIndex = this.students.findIndex(s => s.id === studentId);
            if (studentIndex === -1) {
                throw new Error('Estudiante no encontrado');
            }
            
            // Actualizar datos
            const updatedStudent = {
                ...this.students[studentIndex],
                ...newData,
                lastActivity: new Date().toISOString()
            };
            
            this.students[studentIndex] = updatedStudent;
            
            // Si es el estudiante actual, actualizar referencia
            if (this.currentStudent && this.currentStudent.id === studentId) {
                this.currentStudent = updatedStudent;
                this.updateCurrentStudentDisplay();
            }
            
            // Guardar cambios
            await this.saveToLocal();
            
            // Guardar en Supabase si est√° disponible
            if (this.supabaseClient) {
                await this.saveToSupabase(updatedStudent);
            }
            
            console.log(`‚úÖ Estudiante ${updatedStudent.name} actualizado`);
            return updatedStudent;
            
        } catch (error) {
            console.error('‚ùå Error actualizando estudiante:', error);
            throw error;
        }
    }

    // ‚úÖ M√âTODO AUXILIAR: Obtener estudiante por ID
    getStudentById(studentId) {
        return this.students.find(s => s.id === studentId);
    }

    // ‚úÖ M√âTODO AUXILIAR: Refrescar contenido del modal
    refreshModalContent() {
        try {
            if (this.selectionModal && this.selectionModal.actualizarContenido) {
                this.selectionModal.actualizarContenido();
            }
        } catch (error) {
            console.error('‚ùå Error refrescando modal:', error);
        }
    }

    // ‚úÖ M√âTODO AUXILIAR: Resetear estilos del formulario
    resetFormStyles() {
        try {
            // Resetear tarjetas de g√©nero
            document.querySelectorAll('.gender-card').forEach(card => {
                card.style.borderColor = '#D1D5DB';
                card.style.backgroundColor = 'white';
            });
            
            // Resetear pills de intereses
            document.querySelectorAll('.interest-pill').forEach(pill => {
                pill.style.background = '#F3F4F6';
                pill.style.borderColor = 'transparent';
                pill.style.color = '#374151';
            });
            
            // Resetear tarjetas de nivel
            document.querySelectorAll('.level-card').forEach(card => {
                card.style.borderColor = '#D1D5DB';
                card.style.backgroundColor = 'white';
            });
            
            // Resetear avatares
            document.querySelectorAll('.avatar-option').forEach(option => {
                option.style.borderColor = '#D1D5DB';
                option.style.backgroundColor = 'white';
            });
        } catch (error) {
            console.error('‚ùå Error reseteando estilos:', error);
        }
    }

    // ‚úÖ FALLBACK: Modal b√°sico de selecci√≥n
    openStudentModalFallback() {
        const modal = document.getElementById('student-modal');
        if (modal) {
            modal.classList.remove('hidden');
            modal.style.display = 'flex';
            this.populateStudentsList();
        }
    }

    // ‚úÖ FALLBACK: Poblar lista b√°sica de estudiantes
    populateStudentsList() {
        const listContainer = document.getElementById('students-list');
        if (!listContainer) return;
        
        if (this.students.length === 0) {
            listContainer.innerHTML = `
                <div class="text-center py-8 text-gray-500">
                    <div class="text-4xl mb-2">üë•</div>
                    <p>No hay estudiantes registrados</p>
                </div>
            `;
            return;
        }
        
        listContainer.innerHTML = this.students.map(student => `
            <div class="student-item ${this.currentStudent?.id === student.id ? 'selected' : ''}"
                 onclick="window.studentManager.selectStudent('${student.id}').then(() => window.studentManager.closeModals())">
                <div class="flex items-center space-x-3">
                    <div class="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                        <span class="text-lg">${student.avatar || (student.gender === 'ni√±a' ? 'üëß' : 'üë¶')}</span>
                    </div>
                    <div>
                        <div class="font-medium">${student.name}</div>
                        <div class="text-sm text-gray-500">${student.age} a√±os ‚Ä¢ ${student.course || 'Sin curso'}</div>
                    </div>
                </div>
            </div>
        `).join('');
    }
    
    // ‚úÖ M√âTODOS P√öBLICOS DE CONSULTA
    getAllStudents() {
        return [...this.students];
    }
    
    getCurrentStudent() {
        return this.currentStudent;
    }
    
    getStudentCount() {
        return this.students.length;
    }
    
    isStudentSelected() {
        return this.currentStudent !== null;
    }
    
    // ‚úÖ M√âTODOS DE ESTAD√çSTICAS
    async updateStudentStats(studentId, newStats) {
        try {
            const student = this.getStudentById(studentId);
            if (!student) return false;
            
            student.stats = { ...student.stats, ...newStats };
            student.lastActivity = new Date().toISOString();
            
            await this.saveToLocal();
            
            if (this.supabaseClient) {
                await this.saveToSupabase(student);
            }
            
            // Actualizar display si el estudiante actual
            if (this.currentStudent?.id === studentId) {
                this.currentStudent = student;
                this.updateCurrentStudentDisplay();
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå Error actualizando estad√≠sticas:', error);
            return false;
        }
    }
}

// ‚úÖ INICIAR SISTEMA GLOBALMENTE ACCESIBLE
window.studentManagementSystem = new StudentManagementSystem();

// ‚úÖ EXPORTAR PARA PRUEBAS UNITARIAS
if (typeof module !== 'undefined' && module.exports) {
    module.exports = StudentManagementSystem;
}

// ‚úÖ CREAR INSTANCIA GLOBAL
if (typeof window !== 'undefined') {
    window.studentManager = new StudentManagementSystem();
    console.log('‚úÖ StudentManagementSystem disponible como window.studentManager');
    
    // ‚úÖ NUEVO: Funci√≥n global para diagn√≥stico
    window.diagnoseStudentSystem = function() {
        if (window.studentManager && window.studentManager.diagnoseSupabaseConnection) {
            return window.studentManager.diagnoseSupabaseConnection();
        } else {
            console.error('‚ùå Sistema de estudiantes no disponible');
        }
    };
    
    // ‚úÖ NUEVO: Funci√≥n global para abrir modal desde HTML
    window.openStudentModal = function() {
        try {
            if (window.studentManager && window.studentManager.isInitialized) {
                window.studentManager.openStudentModal();
            } else {
                console.warn('‚ö†Ô∏è StudentManager no inicializado, intentando fallback');
                // Fallback b√°sico
                const modal = document.getElementById('student-modal');
                if (modal) {
                    modal.classList.remove('hidden');
                    modal.style.display = 'flex';
                }
            }
        } catch (error) {
            console.error('‚ùå Error en openStudentModal global:', error);
        }
    };
    
    // ‚úÖ NUEVO: Otras funciones globales necesarias
    window.selectStudent = function(studentId) {
        try {
            if (window.studentManager && window.studentManager.isInitialized) {
                return window.studentManager.selectStudent(studentId);
            }
        } catch (error) {
            console.error('‚ùå Error en selectStudent global:', error);
        }
    };
    
    window.closeStudentModals = function() {
        try {
            if (window.studentManager && window.studentManager.isInitialized) {
                window.studentManager.closeModals();
            }
        } catch (error) {
            console.error('‚ùå Error en closeStudentModals global:', error);
        }
    };
}