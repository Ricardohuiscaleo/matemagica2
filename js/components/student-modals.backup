/**
 * ‚úèÔ∏è COMPONENTE: MODAL DE EDICI√ìN DE ESTUDIANTES
 * Responsabilidad √öNICA: Editar estudiante existente
 * NO maneja selecci√≥n ni creaci√≥n - solo edici√≥n
 */

class StudentEditModal {
    constructor(studentManager) {
        this.studentManager = studentManager;
        this.isOpen = false;
        this.currentStudentId = null;
        this.modalId = 'edit-student-modal-dynamic';
        
        // Configuraci√≥n espec√≠fica para EDICI√ìN √∫nicamente
        this.config = {
            enableAvatarSelection: true,
            enableInterestsEdit: true,
            enableLevelChange: true,
            validateOnInput: true
        };
    }

    // ‚úÖ FUNCI√ìN ESPEC√çFICA: Solo para editar estudiante existente
    open(studentId) {
        if (this.isOpen) {
            console.warn('‚ö†Ô∏è Modal de edici√≥n ya est√° abierto');
            return;
        }
        
        const student = this.studentManager.getStudentById(studentId);
        if (!student) {
            console.error('‚ùå Estudiante no encontrado para editar');
            if (typeof showErrorToast === 'function') {
                showErrorToast('Estudiante no encontrado');
            }
            return;
        }
        
        this.currentStudentId = studentId;
        this.createEditModal();
        this.populateFormWithStudent(student);
        this.setupEditListeners();
        this.showModal();
        
        this.isOpen = true;
        console.log(`‚úèÔ∏è Modal de EDICI√ìN abierto para: ${student.name}`);
    }

    // ‚úÖ CREAR MODAL ESPEC√çFICO PARA EDICI√ìN
    createEditModal() {
        this.removeExistingModal();

        const modalHTML = `
            <div id="${this.modalId}" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
                <div class="bg-white rounded-xl shadow-2xl max-w-lg w-full mx-4 max-h-[90vh] overflow-y-auto">
                    <!-- Header espec√≠fico para edici√≥n -->
                    <div class="bg-gradient-to-r from-green-500 to-teal-600 text-white p-4 rounded-t-xl">
                        <div class="flex justify-between items-center">
                            <div>
                                <h3 class="text-lg font-bold">‚úèÔ∏è Editar Estudiante</h3>
                                <p class="text-green-100 text-sm">Actualiza la informaci√≥n</p>
                            </div>
                            <button id="close-edit-modal" class="text-white hover:text-gray-200">
                                <i class="fas fa-times text-xl"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Formulario espec√≠fico para edici√≥n -->
                    <form id="edit-student-form-dynamic" class="p-6 space-y-5">
                        ${this.renderFormFields()}
                        
                        <!-- Botones de acci√≥n espec√≠ficos para edici√≥n -->
                        <div class="flex space-x-3 pt-6 border-t border-gray-200">
                            <button type="button" id="cancel-edit-btn" 
                                class="flex-1 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-4 rounded-lg transition-colors">
                                <i class="fas fa-times mr-2"></i>Cancelar
                            </button>
                            <button type="submit" id="save-edit-btn"
                                class="flex-1 bg-green-500 hover:bg-green-600 text-white font-medium py-3 px-4 rounded-lg transition-colors">
                                <i class="fas fa-save mr-2"></i>Guardar Cambios
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        `;

        document.body.insertAdjacentHTML('beforeend', modalHTML);
    }

    // ‚úÖ RENDERIZAR CAMPOS ESPEC√çFICOS PARA EDICI√ìN
    renderFormFields() {
        return `
            <!-- Avatar selector espec√≠fico para edici√≥n -->
            <div class="space-y-2">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-smile text-yellow-500 mr-2"></i>
                    Avatar
                </label>
                <div class="grid grid-cols-6 gap-2" id="avatar-selector">
                    ${this.renderAvatarOptions()}
                </div>
                <input type="hidden" id="edit-selected-avatar" name="avatar" value="üë¶">
            </div>
            
            <!-- Nombre -->
            <div class="space-y-2">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-user text-blue-500 mr-2"></i>
                    Nombre completo *
                </label>
                <input type="text" id="edit-student-name-input" required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all">
            </div>
            
            <!-- Edad -->
            <div class="space-y-2">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-birthday-cake text-purple-500 mr-2"></i>
                    Edad *
                </label>
                <select id="edit-student-age-select" required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all">
                    ${this.renderAgeOptions()}
                </select>
            </div>
            
            <!-- G√©nero -->
            <div class="space-y-3">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-child text-pink-500 mr-2"></i>
                    G√©nero *
                </label>
                <div class="grid grid-cols-2 gap-3" id="gender-selector">
                    ${this.renderGenderOptions()}
                </div>
            </div>
            
            <!-- Curso -->
            <div class="space-y-2">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-school text-green-500 mr-2"></i>
                    Curso
                </label>
                <input type="text" id="edit-student-course-input"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all">
            </div>
            
            <!-- Intereses -->
            <div class="space-y-2">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-heart text-red-500 mr-2"></i>
                    Intereses
                </label>
                <div class="grid grid-cols-2 gap-2" id="interests-selector">
                    ${this.renderInterestOptions()}
                </div>
            </div>
            
            <!-- Nivel matem√°tico -->
            <div class="space-y-2">
                <label class="flex items-center text-sm font-semibold text-gray-700">
                    <i class="fas fa-chart-line text-orange-500 mr-2"></i>
                    Nivel matem√°tico
                </label>
                <select id="edit-student-level-select"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 transition-all">
                    <option value="1">üü¢ F√°cil (Sin reserva)</option>
                    <option value="2">üü° Medio (Con reserva)</option>
                    <option value="3">üî¥ Dif√≠cil (Mixto)</option>
                </select>
            </div>
        `;
    }

    // ‚úÖ OPCIONES DE AVATAR PARA EDICI√ìN
    renderAvatarOptions() {
        const avatars = ['üëß', 'üë¶', 'üßí', 'üë©‚Äçüéì', 'üë®‚Äçüéì', 'üòä'];
        return avatars.map(avatar => 
            `<button type="button" class="avatar-edit-option p-2 border-2 border-gray-200 rounded-lg hover:border-green-300 transition-all" 
                     data-avatar="${avatar}" onclick="window.studentEditModal.selectAvatar('${avatar}')">
                <span class="text-2xl">${avatar}</span>
            </button>`
        ).join('');
    }

    // ‚úÖ OPCIONES DE EDAD PARA EDICI√ìN
    renderAgeOptions() {
        const ages = [
            {value: 5, label: '5 a√±os (Pre-Kinder)'},
            {value: 6, label: '6 a√±os (Kinder)'},
            {value: 7, label: '7 a√±os (1¬∞ B√°sico)'},
            {value: 8, label: '8 a√±os (2¬∞ B√°sico)'},
            {value: 9, label: '9 a√±os (3¬∞ B√°sico)'},
            {value: 10, label: '10 a√±os (4¬∞ B√°sico)'},
            {value: 11, label: '11 a√±os (5¬∞ B√°sico)'},
            {value: 12, label: '12 a√±os (6¬∞ B√°sico)'}
        ];
        
        return ages.map(age => 
            `<option value="${age.value}">${age.label}</option>`
        ).join('');
    }

    // ‚úÖ OPCIONES DE G√âNERO PARA EDICI√ìN
    renderGenderOptions() {
        return `
            <label class="gender-edit-option cursor-pointer">
                <input type="radio" name="edit-gender-radio" value="ni√±a" required class="hidden">
                <div class="gender-edit-card p-4 border-2 border-gray-200 rounded-lg text-center hover:border-pink-300 transition-all">
                    <div class="text-3xl mb-2">üëß</div>
                    <div class="font-medium text-gray-700">Ni√±a</div>
                </div>
            </label>
            <label class="gender-edit-option cursor-pointer">
                <input type="radio" name="edit-gender-radio" value="ni√±o" required class="hidden">
                <div class="gender-edit-card p-4 border-2 border-gray-200 rounded-lg text-center hover:border-blue-300 transition-all">
                    <div class="text-3xl mb-2">üë¶</div>
                    <div class="font-medium text-gray-700">Ni√±o</div>
                </div>
            </label>
        `;
    }

    // ‚úÖ OPCIONES DE INTERESES PARA EDICI√ìN
    renderInterestOptions() {
        const interests = [
            {value: 'animales', label: 'üê∂ Animales'},
            {value: 'deportes', label: '‚öΩ Deportes'},
            {value: 'princesas', label: 'üë∏ Princesas'},
            {value: 'superh√©roes', label: 'ü¶∏ Superh√©roes'},
            {value: 'carros', label: 'üöó Carros'},
            {value: 'm√∫sica', label: 'üéµ M√∫sica'}
        ];
        
        return interests.map(interest => 
            `<label class="interest-edit-tag cursor-pointer">
                <input type="checkbox" name="edit-interests-check" value="${interest.value}" class="hidden">
                <span class="interest-edit-pill inline-block w-full text-center py-2 px-3 bg-gray-100 border-2 border-transparent rounded-lg transition-all hover:bg-gray-200">
                    ${interest.label}
                </span>
            </label>`
        ).join('');
    }

    // ‚úÖ LLENAR FORMULARIO CON DATOS DEL ESTUDIANTE
    populateFormWithStudent(student) {
        try {
            // Datos b√°sicos
            const nameInput = document.getElementById('edit-student-name-input');
            const ageSelect = document.getElementById('edit-student-age-select');
            const courseInput = document.getElementById('edit-student-course-input');
            const levelSelect = document.getElementById('edit-student-level-select');
            const avatarInput = document.getElementById('edit-selected-avatar');
            
            if (nameInput) nameInput.value = student.name || '';
            if (ageSelect) ageSelect.value = student.age || 8;
            if (courseInput) courseInput.value = student.course || '';
            if (levelSelect) levelSelect.value = student.mathLevel || 1;
            if (avatarInput) avatarInput.value = student.avatar || 'üë¶';
            
            // Seleccionar avatar
            this.selectAvatar(student.avatar || 'üë¶');
            
            // Seleccionar g√©nero
            const genderRadio = document.querySelector(`input[name="edit-gender-radio"][value="${student.gender}"]`);
            if (genderRadio) {
                genderRadio.checked = true;
                this.updateGenderVisual(student.gender);
            }
            
            // Seleccionar intereses
            if (student.interests && Array.isArray(student.interests)) {
                student.interests.forEach(interest => {
                    const checkbox = document.querySelector(`input[name="edit-interests-check"][value="${interest}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                        this.updateInterestVisual(checkbox, true);
                    }
                });
            }
            
            console.log('‚úÖ Formulario de edici√≥n poblado con datos del estudiante');
        } catch (error) {
            console.error('‚ùå Error poblando formulario:', error);
        }
    }

    // ‚úÖ CONFIGURAR LISTENERS ESPEC√çFICOS PARA EDICI√ìN
    setupEditListeners() {
        // Cerrar modal
        const closeBtn = document.getElementById('close-edit-modal');
        const cancelBtn = document.getElementById('cancel-edit-btn');
        
        [closeBtn, cancelBtn].forEach(btn => {
            if (btn) {
                btn.addEventListener('click', () => this.close());
            }
        });

        // Guardar cambios
        const form = document.getElementById('edit-student-form-dynamic');
        const saveBtn = document.getElementById('save-edit-btn');
        
        const handleSave = (e) => {
            e.preventDefault();
            this.saveChanges();
        };
        
        if (form) form.addEventListener('submit', handleSave);
        if (saveBtn) saveBtn.addEventListener('click', handleSave);

        // Listeners para g√©nero
        document.querySelectorAll('input[name="edit-gender-radio"]').forEach(radio => {
            radio.addEventListener('change', () => {
                this.updateGenderVisual(radio.value);
            });
        });
        
        // Listeners para intereses
        document.querySelectorAll('input[name="edit-interests-check"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                this.updateInterestVisual(checkbox, checkbox.checked);
            });
        });

        // Validaci√≥n en tiempo real
        if (this.config.validateOnInput) {
            this.setupRealTimeValidation();
        }
    }

    // ‚úÖ SELECCIONAR AVATAR ESPEC√çFICO PARA EDICI√ìN
    selectAvatar(avatar) {
        // Actualizar input oculto
        const avatarInput = document.getElementById('edit-selected-avatar');
        if (avatarInput) avatarInput.value = avatar;
        
        // Actualizar visual
        document.querySelectorAll('.avatar-edit-option').forEach(option => {
            option.style.borderColor = '#D1D5DB';
            option.style.backgroundColor = 'white';
        });
        
        const selectedOption = document.querySelector(`[data-avatar="${avatar}"]`);
        if (selectedOption) {
            selectedOption.style.borderColor = '#10B981';
            selectedOption.style.backgroundColor = '#ECFDF5';
        }
    }

    // ‚úÖ ACTUALIZAR VISUAL DE G√âNERO
    updateGenderVisual(selectedGender) {
        document.querySelectorAll('.gender-edit-card').forEach(card => {
            card.style.borderColor = '#D1D5DB';
            card.style.backgroundColor = 'white';
        });
        
        const selectedCard = document.querySelector(`input[value="${selectedGender}"]`)?.closest('.gender-edit-option')?.querySelector('.gender-edit-card');
        if (selectedCard) {
            selectedCard.style.borderColor = selectedGender === 'ni√±a' ? '#EC4899' : '#3B82F6';
            selectedCard.style.backgroundColor = selectedGender === 'ni√±a' ? '#FDF2F8' : '#EFF6FF';
        }
    }

    // ‚úÖ ACTUALIZAR VISUAL DE INTERESES
    updateInterestVisual(checkbox, isSelected) {
        const pill = checkbox.closest('.interest-edit-tag').querySelector('.interest-edit-pill');
        if (pill) {
            if (isSelected) {
                pill.style.backgroundColor = '#DBEAFE';
                pill.style.borderColor = '#3B82F6';
                pill.style.color = '#1E40AF';
            } else {
                pill.style.backgroundColor = '#F3F4F6';
                pill.style.borderColor = 'transparent';
                pill.style.color = '#374151';
            }
        }
    }

    // ‚úÖ GUARDAR CAMBIOS ESPEC√çFICO PARA EDICI√ìN
    async saveChanges() {
        try {
            if (!this.currentStudentId) {
                throw new Error('No hay estudiante para editar');
            }
            
            // Obtener datos del formulario
            const formData = this.getFormData();
            
            // Validar datos
            if (!this.validateFormData(formData)) {
                return;
            }
            
            // Actualizar estudiante
            const updatedStudent = await this.studentManager.updateStudent(this.currentStudentId, formData);
            
            // Mostrar √©xito
            if (typeof showSuccessToast === 'function') {
                showSuccessToast(`‚úÖ ${updatedStudent.name} actualizado correctamente`);
            }
            
            // Cerrar modal
            this.close();
            
            console.log('‚úÖ Cambios guardados exitosamente');
            
        } catch (error) {
            console.error('‚ùå Error guardando cambios:', error);
            if (typeof showErrorToast === 'function') {
                showErrorToast('Error al guardar los cambios');
            }
        }
    }

    // ‚úÖ OBTENER DATOS DEL FORMULARIO ESPEC√çFICO PARA EDICI√ìN
    getFormData() {
        const nameInput = document.getElementById('edit-student-name-input');
        const ageSelect = document.getElementById('edit-student-age-select');
        const courseInput = document.getElementById('edit-student-course-input');
        const levelSelect = document.getElementById('edit-student-level-select');
        const avatarInput = document.getElementById('edit-selected-avatar');
        
        const genderRadio = document.querySelector('input[name="edit-gender-radio"]:checked');
        const interestCheckboxes = document.querySelectorAll('input[name="edit-interests-check"]:checked');
        const interests = Array.from(interestCheckboxes).map(cb => cb.value);
        
        return {
            name: nameInput?.value?.trim() || '',
            age: parseInt(ageSelect?.value) || 8,
            gender: genderRadio?.value || 'ni√±o',
            course: courseInput?.value?.trim() || '',
            mathLevel: parseInt(levelSelect?.value) || 1,
            avatar: avatarInput?.value || 'üë¶',
            interests: interests,
            lastActivity: new Date().toISOString()
        };
    }

    // ‚úÖ VALIDAR DATOS ESPEC√çFICO PARA EDICI√ìN
    validateFormData(data) {
        if (!data.name || data.name.length < 2) {
            if (typeof showErrorToast === 'function') {
                showErrorToast('‚ùå El nombre debe tener al menos 2 caracteres');
            }
            return false;
        }
        
        if (data.age < 5 || data.age > 12) {
            if (typeof showErrorToast === 'function') {
                showErrorToast('‚ùå La edad debe estar entre 5 y 12 a√±os');
            }
            return false;
        }
        
        if (!['ni√±o', 'ni√±a'].includes(data.gender)) {
            if (typeof showErrorToast === 'function') {
                showErrorToast('‚ùå Debe seleccionar un g√©nero');
            }
            return false;
        }
        
        return true;
    }

    // ‚úÖ VALIDACI√ìN EN TIEMPO REAL
    setupRealTimeValidation() {
        const nameInput = document.getElementById('edit-student-name-input');
        if (nameInput) {
            nameInput.addEventListener('input', (e) => {
                const isValid = e.target.value.trim().length >= 2;
                e.target.style.borderColor = isValid ? '#10B981' : '#EF4444';
            });
        }
    }

    // ‚úÖ M√âTODOS DE CONTROL DEL MODAL
    showModal() {
        const modal = document.getElementById(this.modalId);
        if (modal) {
            modal.classList.remove('hidden');
            modal.style.display = 'flex';
            
            // Enfocar en nombre
            setTimeout(() => {
                const nameInput = document.getElementById('edit-student-name-input');
                if (nameInput) nameInput.focus();
            }, 100);
        }
    }

    close() {
        if (!this.isOpen) return;
        
        const modal = document.getElementById(this.modalId);
        if (modal) {
            modal.classList.add('hidden');
            modal.style.display = 'none';
        }
        
        this.removeExistingModal();
        this.currentStudentId = null;
        this.isOpen = false;
        console.log('‚úèÔ∏è Modal de EDICI√ìN cerrado');
    }

    removeExistingModal() {
        const existingModal = document.getElementById(this.modalId);
        if (existingModal) {
            existingModal.remove();
        }
    }

    // ‚úÖ M√âTODOS P√öBLICOS
    isModalOpen() {
        return this.isOpen;
    }

    getCurrentStudentId() {
        return this.currentStudentId;
    }
}

// ‚úÖ CREAR INSTANCIA GLOBAL DEL MODAL DE EDICI√ìN
if (typeof window !== 'undefined') {
    // Funci√≥n para inicializar el modal cuando studentManager est√© listo
    window.initializeStudentEditModal = function() {
        if (window.studentManager && !window.studentEditModal) {
            window.studentEditModal = new StudentEditModal(window.studentManager);
            console.log('‚úÖ Modal de Edici√≥n de Estudiantes disponible globalmente');
            return true;
        }
        return false;
    };

    // Intentar inicializar inmediatamente
    document.addEventListener('DOMContentLoaded', () => {
        // Verificar si ya est√° inicializado
        if (window.studentEditModal) {
            console.log('‚úÖ Modal de edici√≥n ya inicializado');
            return;
        }
        
        // Esperar un poco para que studentManager se inicialice
        setTimeout(() => {
            if (!window.initializeStudentEditModal()) {
                // Si no est√° listo, seguir intentando
                let attempts = 0;
                const interval = setInterval(() => {
                    attempts++;
                    if (window.initializeStudentEditModal() || attempts >= 20) {
                        clearInterval(interval);
                        if (attempts >= 20 && !window.studentEditModal) {
                            console.warn('‚ö†Ô∏è Timeout esperando studentManager para el modal de edici√≥n');
                        }
                    }
                }, 250);
            }
        }, 300);
    });
    
    // ‚úÖ FUNCI√ìN GLOBAL PARA ABRIR MODAL DE EDICI√ìN DESDE HTML
    window.openEditStudentModal = function(studentId) {
        try {
            if (window.studentEditModal && window.studentEditModal.open) {
                window.studentEditModal.open(studentId);
            } else {
                console.warn('‚ö†Ô∏è Modal de edici√≥n no disponible');
                if (typeof showErrorToast === 'function') {
                    showErrorToast('Modal de edici√≥n no disponible');
                }
            }
        } catch (error) {
            console.error('‚ùå Error abriendo modal de edici√≥n:', error);
        }
    };
}

// ‚úÖ EXPORTAR PARA M√ìDULOS
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { StudentEditModal };
}

console.log('‚úÖ Componente Modal de Edici√≥n de Estudiantes cargado completamente');